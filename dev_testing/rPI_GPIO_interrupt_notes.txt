#!/usr/bin/env python2.7  

# script by Alex Eames https://raspi.tv  
# https://raspi.tv/how-to-use-interrupts-with-python-on-the-raspberry-pi-and-rpi-gpio-part-3  

#imports
import RPi.GPIO as GPIO  
GPIO.setmode(GPIO.BCM)  

#----------------setup pins---------------------  
# GPIO 23 & 17 set up as inputs, pulled up to avoid false detection.  
# Both ports are wired to connect to GND on button press.  
# So we'll be setting up falling edge detection for both  
GPIO.setup(23, GPIO.IN, pull_up_down=GPIO.PUD_UP)  
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)  
  
# GPIO 24 set up as an input, pulled down, connected to 3V3 on button press  
GPIO.setup(24, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)  

#----------------function defines---------------------  
# now we'll define two threaded callback functions  
# these will run in another thread when our events are detected  
def my_callback(channel):                   #channel is the GPIO triggered as input
    print "falling edge detected on 17"  
  
def my_callback2(channel):  
    print "falling edge detected on 23"  


#----------------attach interrupts---------------------  
# when a falling edge is detected on port 17, regardless of whatever   
# else is happening in the program, the function my_callback will be run  
GPIO.add_event_detect(17, GPIO.FALLING, callback=my_callback, bouncetime=300)  #bounce time set to 300ms
  
# when a falling edge is detected on port 23, regardless of whatever   
# else is happening in the program, the function my_callback2 will be run  
# 'bouncetime=300' includes the bounce control written into interrupts2a.py  
GPIO.add_event_detect(23, GPIO.FALLING, callback=my_callback2, bouncetime=300)  
 
#----------------main part of script---------------------
# this uses the "wait for edge" to block the normal running of the program until
# the condition is met.
try:  
    print "Waiting for rising edge on port 24"  
    GPIO.wait_for_edge(24, GPIO.RISING)  
    print "Rising edge detected on port 24. Here ends the program."   
except KeyboardInterrupt:  
    GPIO.cleanup()       # clean up GPIO on CTRL+C exit  

# GPIO cleanup to reset any GPIO back to their normal states. That way if
# anything is re-defined there's no conflict. IE, another script runs that
# has a different definition for a GPIO. May not need this on the 
# pydash script
GPIO.cleanup()           # clean up GPIO on normal exit  